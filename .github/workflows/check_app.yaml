name: Check Black & Install

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create isolated working directory
        run: |
          PYTHON_VERSION="${{ matrix.python-version }}"
          WORKDIR="work-$PYTHON_VERSION"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"

          # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
          cp ../run.py ./
          cp ../dbpatch.py ./
          cp ../create_user.py ./
          cp ../backuper.py ./
          cp ../requirements.txt ./
          cp ../config_example.py config.py

          # –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          cp -r ../app ./
          cp -r ../supervisor ./supervisor 2>/dev/null || echo "supervisor/ not found, skipping."

          # –ü—Ä–æ–≤–µ—Ä–∫–∞
          [[ -f "run.py" ]] && [[ -d "app" ]] || (echo "‚ùå Critical files missing!" && exit 1)
          echo "‚úÖ Files copied to $WORKDIR"

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-venv postgresql nginx openssl netcat-openbsd

      - name: Start PostgreSQL
        run: sudo systemctl start postgresql
      - name: Setup DB and run app in isolated env
        run: |
          PYTHON_VERSION="${{ matrix.python-version }}"
          WORKDIR="work-$PYTHON_VERSION"
          cd "$WORKDIR"

          # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          mkdir -p logs backups user_uploads certs

          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SECRET_KEY –¥–ª—è Flask
          export FLASK_SECRET_KEY=$(python -c "import secrets; print(secrets.token_hex(32))")
          echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SECRET_KEY –¥–ª—è Flask"

          # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          python -m venv venv
          source venv/bin/activate

          # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          export DB_NAME="nabs_db_py${PYTHON_VERSION//./}"
          export DB_USER="nabs_user_py${PYTHON_VERSION//./}"
          export DB_PASSWORD=$(openssl rand -base64 14)
          export APP_PORT=5000
          export FLASK_ENV=production
          export FLASK_DEBUG=0

          echo "[+] DB: $DB_NAME, User: $DB_USER, Port: $APP_PORT"

          # –°–æ–∑–¥–∞—ë–º –ë–î
          sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;"
          sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;"
          sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;"
          sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          pip install --upgrade pip
          pip install -r requirements.txt

          # === üî• –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ TOKEN –≤ config.py ===
          if grep -q "TOKEN = \"\"" config.py; then
            echo "üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SECRET_KEY –≤ config.py"
            sed -i "s|TOKEN = \"\"|TOKEN = \"$FLASK_SECRET_KEY\"|g" config.py
          elif grep -q "TOKEN = \"your_token\"" config.py; then
            sed -i "s|TOKEN = \"your_token\"|TOKEN = \"$FLASK_SECRET_KEY\"|g" config.py
          else
            echo "‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë."
          fi
          # =====================================================

          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          nohup python run.py > app.log 2>&1 &
          SERVER_PID=$!
          echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, PID: $SERVER_PID"

          # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
          sleep 15

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª—É—à–∞–µ—Ç –ª–∏ –ø–æ—Ä—Ç
          if ! nc -z 127.0.0.1 $APP_PORT; then
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $APP_PORT"
            tail -n 30 app.log
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP-–æ—Ç–≤–µ—Ç
          if ! curl -f -s http://127.0.0.1:$APP_PORT; then
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP"
            tail -n 30 app.log
            kill $SERVER_PID
            exit 1
          fi

          echo "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $APP_PORT"

          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          echo "‚ÑπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
          kill $SERVER_PID
          sleep 3
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
            kill -9 $SERVER_PID
          fi
          echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. CI –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ."
