name: Check Black & Install

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É (–µ—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Ä–µ—Å—É—Ä—Å—ã)
      # max-parallel: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create isolated working directory
        run: |
          WORKDIR="work-${{ matrix.python-version }}"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"
          cp ../app.py ./
          cp ../requirements.txt ./
          cp ../config_example.py config.py

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-venv postgresql nginx openssl netcat-openbsd

      - name: Start PostgreSQL
        run: sudo systemctl start postgresql

      - name: Setup DB and run app in isolated env
        run: |
          PYTHON_VERSION="${{ matrix.python-version }}"
          WORKDIR="work-$PYTHON_VERSION"
          cd "$WORKDIR"

          # –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          python -m venv venv
          source venv/bin/activate

          # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏
          export DB_NAME="nabs_db_py${PYTHON_VERSION//./}"
          export DB_USER="nabs_user_py${PYTHON_VERSION//./}"
          export DB_PASSWORD=$(openssl rand -base64 14)
          export APP_PORT=$((5000 + 10 * $(echo $PYTHON_VERSION | cut -d'.' -f2)))

          echo "[+] Using DB: $DB_NAME, User: $DB_USER, Port: $APP_PORT"

          # –°–æ–∑–¥–∞—ë–º –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;"
          sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;"
          sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;"
          sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          pip install --upgrade pip
          pip install -r requirements.txt

          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º config.py
          sed -i "s/DBPassword *= *\".*\"/DBPassword = \"$DB_PASSWORD\"/" config.py
          sed -i "s/nabs_db/$DB_NAME/" config.py
          sed -i "s/nabs_user/$DB_USER/" config.py

          # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
          export FLASK_APP=app.py
          flask db upgrade

          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          nohup python -m flask run --host=127.0.0.1 --port $APP_PORT > app.log 2>&1 &
          sleep 10

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
          if nc -z 127.0.0.1 $APP_PORT; then
            echo "‚úÖ Server successfully running on port $APP_PORT"
          else
            echo "‚ùå Failed to start server on port $APP_PORT"
            echo "üìÑ Last logs:"
            tail -n 20 app.log
            exit 1
          fi

      - name: Verify HTTPS server (optional)
        run: |
          PYTHON_VERSION="${{ matrix.python-version }}"
          APP_PORT=$((5000 + 10 * $(echo $PYTHON_VERSION | cut -d'.' -f2)))
          # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å SSL, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å curl --insecure
          # curl --insecure https://127.0.0.1:$APP_PORT || exit 1
          # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º HTTP
          curl -v http://127.0.0.1:$APP_PORT || exit 1
